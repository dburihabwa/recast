# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import playcloud_pb2 as playcloud__pb2


class EncoderDecoderStub(object):
  """the encoder service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Encode = channel.unary_unary(
        '/EncoderDecoder/Encode',
        request_serializer=playcloud__pb2.EncodeRequest.SerializeToString,
        response_deserializer=playcloud__pb2.EncodeReply.FromString,
        )
    self.Decode = channel.unary_unary(
        '/EncoderDecoder/Decode',
        request_serializer=playcloud__pb2.DecodeRequest.SerializeToString,
        response_deserializer=playcloud__pb2.DecodeReply.FromString,
        )
    self.Reconstruct = channel.unary_unary(
        '/EncoderDecoder/Reconstruct',
        request_serializer=playcloud__pb2.ReconstructRequest.SerializeToString,
        response_deserializer=playcloud__pb2.ReconstructReply.FromString,
        )
    self.FragmentsNeeded = channel.unary_unary(
        '/EncoderDecoder/FragmentsNeeded',
        request_serializer=playcloud__pb2.FragmentsNeededRequest.SerializeToString,
        response_deserializer=playcloud__pb2.FragmentsNeededReply.FromString,
        )


class EncoderDecoderServicer(object):
  """the encoder service
  """

  def Encode(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Decode(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Reconstruct(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FragmentsNeeded(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EncoderDecoderServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Encode': grpc.unary_unary_rpc_method_handler(
          servicer.Encode,
          request_deserializer=playcloud__pb2.EncodeRequest.FromString,
          response_serializer=playcloud__pb2.EncodeReply.SerializeToString,
      ),
      'Decode': grpc.unary_unary_rpc_method_handler(
          servicer.Decode,
          request_deserializer=playcloud__pb2.DecodeRequest.FromString,
          response_serializer=playcloud__pb2.DecodeReply.SerializeToString,
      ),
      'Reconstruct': grpc.unary_unary_rpc_method_handler(
          servicer.Reconstruct,
          request_deserializer=playcloud__pb2.ReconstructRequest.FromString,
          response_serializer=playcloud__pb2.ReconstructReply.SerializeToString,
      ),
      'FragmentsNeeded': grpc.unary_unary_rpc_method_handler(
          servicer.FragmentsNeeded,
          request_deserializer=playcloud__pb2.FragmentsNeededRequest.FromString,
          response_serializer=playcloud__pb2.FragmentsNeededReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'EncoderDecoder', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ProxyStub(object):
  """the proxy service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetRandomBlocks = channel.unary_unary(
        '/Proxy/GetRandomBlocks',
        request_serializer=playcloud__pb2.BlockRequest.SerializeToString,
        response_deserializer=playcloud__pb2.BlockReply.FromString,
        )
    self.GetBlock = channel.unary_unary(
        '/Proxy/GetBlock',
        request_serializer=playcloud__pb2.NamedBlockRequest.SerializeToString,
        response_deserializer=playcloud__pb2.Strip.FromString,
        )


class ProxyServicer(object):
  """the proxy service
  """

  def GetRandomBlocks(self, request, context):
    """Returns at most n random blocks where n is a parameter of the function
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBlock(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ProxyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetRandomBlocks': grpc.unary_unary_rpc_method_handler(
          servicer.GetRandomBlocks,
          request_deserializer=playcloud__pb2.BlockRequest.FromString,
          response_serializer=playcloud__pb2.BlockReply.SerializeToString,
      ),
      'GetBlock': grpc.unary_unary_rpc_method_handler(
          servicer.GetBlock,
          request_deserializer=playcloud__pb2.NamedBlockRequest.FromString,
          response_serializer=playcloud__pb2.Strip.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Proxy', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
